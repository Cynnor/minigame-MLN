import { useState } from "react";

const board = [
  { id: 1, label: "üöÄ Kh·ªüi nghi·ªáp" },
  { id: 2, label: "√î 2" },
  {
    id: 3,
    label: "Thi·∫øu v·ªën üí∏",
    rule: "M√¢u thu·∫´n: Thi·∫øu v·ªën ƒë·ªÉ ph√°t tri·ªÉn ‚Üí c·∫ßn h·ª£p t√°c/g·ªçi v·ªën.",
  },
  { id: 4, label: "√î 4" },
  {
    id: 5,
    label: "T√≠ch l≈©y üìö",
    rule: "Quy lu·∫≠t L∆∞·ª£ng - Ch·∫•t: Kinh nghi·ªám t√≠ch l≈©y ƒë·ªß nhi·ªÅu s·∫Ω t·∫°o b∆∞·ªõc nh·∫£y.",
  },
  { id: 6, label: "√î 6" },
  {
    id: 7,
    label: "Th·∫•t b·∫°i ‚ùå",
    rule: "Ph·ªß ƒë·ªãnh l·∫ßn 1: Th·∫•t b·∫°i kh√¥ng x√≥a b·ªè t·∫•t c·∫£ m√† ƒë·ªÉ l·∫°i b√†i h·ªçc.",
  },
  { id: 8, label: "√î 8" },
  {
    id: 9,
    label: "T√°i kh·ªüi nghi·ªáp üîÑ",
    rule: "Ph·ªß ƒë·ªãnh c·ªßa ph·ªß ƒë·ªãnh: V∆∞·ª£t qua th·∫•t b·∫°i ƒë·ªÉ ƒë·∫°t tr√¨nh ƒë·ªô cao h∆°n.",
  },
  { id: 10, label: "√î 10" },
  { id: 11, label: "√î 11" },
  {
    id: 12,
    label: "Th√†nh c√¥ng üåü",
    rule: "Th√†nh c√¥ng: K·∫øt qu·∫£ t·∫•t y·∫øu sau qu√° tr√¨nh v∆∞·ª£t m√¢u thu·∫´n, t√≠ch l≈©y, ph·ªß ƒë·ªãnh.",
  },
];

export default function App() {
  const [position, setPosition] = useState(1);
  const [message, setMessage] = useState(null);
  const [lastRoll, setLastRoll] = useState(null);
  const [isRolling, setIsRolling] = useState(false);
  const [diceAngle, setDiceAngle] = useState(0); // g√≥c xoay x√∫c x·∫Øc
  const [chatGptResult, setChatGptResult] = useState(null);
  const [chatGptLoading, setChatGptLoading] = useState(false);
  const [diceClass, setDiceClass] = useState(""); // hi·ªáu ·ª©ng x√∫c x·∫Øc

  const rollDice = () => {
    if (position >= 12 || isRolling) return;
    setIsRolling(true);
    setDiceClass("rolling"); // th√™m class hi·ªáu ·ª©ng
    setDiceAngle((a) => a + 540 + Math.floor(Math.random() * 360)); // xoay ng·∫´u nhi√™n h∆°n
    // Ch·ªâ random ra 1, 2, 3
    const dice = Math.floor(Math.random() * 3) + 1;
    setLastRoll(dice);

    let newPos = position + dice;
    if (newPos > 12) newPos = 12;

    setTimeout(() => {
      setPosition(newPos);
      setChatGptResult(null); // ·∫®n k·∫øt qu·∫£ ChatGPT khi ƒë·∫øn v·ªã tr√≠ m·ªõi
      const currentSquare = board.find((sq) => sq.id === newPos);
      if (currentSquare && currentSquare.rule) {
        setMessage(currentSquare.rule);
      } else {
        setMessage(null);
      }
      setIsRolling(false);
      setDiceClass("shake"); // hi·ªáu ·ª©ng l·∫Øc khi d·ª´ng
      setTimeout(() => setDiceClass(""), 500); // x√≥a hi·ªáu ·ª©ng l·∫Øc sau 0.5s
    }, 600); // kh·ªõp th·ªùi gian xoay
  };

  const resetGame = () => {
    setPosition(1);
    setMessage(null);
    setLastRoll(null);
    setIsRolling(false);
    setDiceAngle(0);
    setChatGptResult(null); // ·∫®n k·∫øt qu·∫£ ChatGPT khi ch∆°i l·∫°i
  };

  // ƒê·ªãnh nghƒ©a m·∫´u cho c√°c √¥ ƒë·∫∑c bi·ªát (c√≥ th·ªÉ s·ª≠a l·∫°i n·ªôi dung cho s√°ng t·∫°o h∆°n)
  const MOCK_DEFINITIONS = {
    3: "M√¢u thu·∫´n bi·ªán ch·ª©ng l√† s·ª± th·ªëng nh·∫•t v√† ƒë·∫•u tranh gi·ªØa c√°c m·∫∑t ƒë·ªëi l·∫≠p trong m·ªôt s·ª± v·∫≠t, hi·ªán t∆∞·ª£ng; n√≥ l√† ngu·ªìn g·ªëc, ƒë·ªông l·ª±c c·ªßa s·ª± v·∫≠n ƒë·ªông v√† ph√°t tri·ªÉn.",
    5: "Quy lu·∫≠t chuy·ªÉn h√≥a t·ª´ nh·ªØng thay ƒë·ªïi v·ªÅ l∆∞·ª£ng th√†nh nh·ªØng thay ƒë·ªïi v·ªÅ ch·∫•t v√† ng∆∞·ª£c l·∫°i, th√¥ng qua b∆∞·ªõc nh·∫£y, ch·ªâ ra c√°ch th·ª©c ph·ªï bi·∫øn c·ªßa s·ª± v·∫≠n ƒë·ªông v√† ph√°t tri·ªÉn.",
    7: "Ph·ªß ƒë·ªãnh bi·ªán ch·ª©ng l√† s·ª± ph·ªß ƒë·ªãnh mang t√≠nh kh√°ch quan, c√≥ t√≠nh k·∫ø th·ª´a v√† ph√°t tri·ªÉn; c√°i m·ªõi ra ƒë·ªùi thay th·∫ø c√°i c≈© nh∆∞ng ƒë·ªìng th·ªùi gi·ªØ l·∫°i nh·ªØng y·∫øu t·ªë t√≠ch c·ª±c.",
    9: "Quy lu·∫≠t ph·ªß ƒë·ªãnh c·ªßa ph·ªß ƒë·ªãnh kh√°i qu√°t khuynh h∆∞·ªõng t·∫•t y·∫øu c·ªßa s·ª± ph√°t tri·ªÉn, l√† qu√° tr√¨nh ƒëi l√™n theo h√¨nh th·ª©c xo√°y ·ªëc, trong ƒë√≥ c√°i m·ªõi ra ƒë·ªùi ph·ªß ƒë·ªãnh c√°i c≈©, nh∆∞ng ƒë·ªìng th·ªùi k·∫ø th·ª´a v√† ph√°t tri·ªÉn.",
    12: "Th√†nh c√¥ng l√† k·∫øt qu·∫£ t·∫•t y·∫øu c·ªßa qu√° tr√¨nh gi·∫£i quy·∫øt m√¢u thu·∫´n, t√≠ch l≈©y l∆∞·ª£ng ƒë·∫øn ƒëi·ªÉm n√∫t, th·ª±c hi·ªán ph·ªß ƒë·ªãnh bi·ªán ch·ª©ng v√† ph·ªß ƒë·ªãnh c·ªßa ph·ªß ƒë·ªãnh, t·∫°o n√™n b∆∞·ªõc ph√°t tri·ªÉn m·ªõi.",
  };

  // Ngu·ªìn tr√≠ch xu·∫•t cho c√°c √¥ ƒë·∫∑c bi·ªát
  const MOCK_SOURCES = {
    3: "Ngu·ªìn: Gi√°o tr√¨nh Tri·∫øt h·ªçc M√°c ‚Äì L√™nin, B·ªô Gi√°o d·ª•c v√† ƒê√†o t·∫°o, NXB Ch√≠nh tr·ªã Qu·ªëc gia S·ª± Th·∫≠t, 2021, Ch∆∞∆°ng III, m·ª•c 2.2.",
    5: "Ngu·ªìn: Gi√°o tr√¨nh Tri·∫øt h·ªçc M√°c ‚Äì L√™nin, B·ªô GD&ƒêT, NXB CTQG S·ª± Th·∫≠t, 2021, Ch∆∞∆°ng II, m·ª•c 2.2",
    7: "Ngu·ªìn: Gi√°o tr√¨nh Tri·∫øt h·ªçc M√°c ‚Äì L√™nin, B·ªô GD&ƒêT, NXB CTQG S·ª± Th·∫≠t, 2021, Ch∆∞∆°ng III, m·ª•c 3.1.",
    9: "Ngu·ªìn: Gi√°o tr√¨nh Tri·∫øt h·ªçc M√°c ‚Äì L√™nin, B·ªô GD&ƒêT, NXB CTQG S·ª± Th·∫≠t, 2021, Ch∆∞∆°ng III, m·ª•c 3.2.",
    12: "Ngu·ªìn: Gi√°o tr√¨nh Tri·∫øt h·ªçc M√°c ‚Äì L√™nin, B·ªô GD&ƒêT, NXB CTQG S·ª± Th·∫≠t, 2021, c√°c ch∆∞∆°ng II‚ÄìIII.",
  };

  // H√†m mock h·ªèi ChatGPT
  const askChatGpt = async () => {
    setChatGptLoading(true);
    setChatGptResult(null);
    setTimeout(() => {
      setChatGptResult(MOCK_DEFINITIONS[position] || "Kh√¥ng c√≥ d·ªØ li·ªáu m·∫´u.");
      setChatGptLoading(false);
    }, 900);
  };

  const diceSymbols = { 1: "‚öÄ", 2: "‚öÅ", 3: "‚öÇ" };

  // C√°c √¥ c√≥ n√∫t "T√¨m hi·ªÉu th√™m"
  const MORE_INFO_IDS = new Set([3, 5, 7, 9, 12]);

  return (
    <div className="app">
      <h1 className="title">üéÆ H√†nh tr√¨nh Startup ‚Äì Minigame</h1>
      <p className="subtitle">Tung x√∫c x·∫Øc, v∆∞·ª£t th·ª≠ th√°ch v√† v·ªÅ ƒë√≠ch!</p>

      <div
        className="layout-two-col"
        style={{
          display: "grid",
          gridTemplateColumns: "minmax(260px, 320px) 1fr",
          gap: 16,
          width: "min(1200px, 96vw)", // tƒÉng nh·∫π b·ªÅ r·ªông t·ªïng
        }}
      >
        {/* C·ªôt tr√°i: X√∫c x·∫Øc + n√∫t + HUD */}
        <section
          className="left-pane"
          style={{
            display: "flex",
            flexDirection: "column",
            gap: 12,
            alignItems: "stretch",
          }}
        >
          <div
            className="dice-box"
            style={{
              position: "relative",
              borderRadius: 18,
              border: "1px solid rgba(255,255,255,.16)",
              background:
                "linear-gradient(160deg, rgba(124,58,237,.25), rgba(244,114,182,.18))",
              boxShadow: isRolling
                ? "0 16px 40px rgba(0,0,0,.4), 0 0 26px rgba(124,58,237,.35)"
                : "0 10px 26px rgba(0,0,0,.35)",
              display: "flex",
              alignItems: "center",
              justifyContent: "center",
              aspectRatio: "1 / 1",
              userSelect: "none",
            }}
          >
            <div
              style={{
                fontSize: "clamp(64px, 10vw, 140px)",
                transform: `rotate(${diceAngle}deg) scale(${
                  isRolling ? 1.12 : 1
                })`,
                transition: isRolling
                  ? "transform 600ms cubic-bezier(0.22,1,0.36,1)"
                  : "transform 300ms cubic-bezier(0.22,1,0.36,1)",
                filter: "drop-shadow(0 6px 14px rgba(0,0,0,.35))",
              }}
              className={diceClass}
              aria-label="X√∫c x·∫Øc"
            >
              {lastRoll ? diceSymbols[lastRoll] : "üé≤"}
            </div>
          </div>

          <div className="controls" style={{ marginBottom: 0 }}>
            <button
              onClick={rollDice}
              disabled={position === 12 || isRolling}
              className="btn btn-primary"
            >
              {isRolling ? "ƒêang tung‚Ä¶" : "Tung x√∫c x·∫Øc üé≤"}
            </button>
            <button onClick={resetGame} className="btn btn-ghost">
              Ch∆°i l·∫°i ‚Üª
            </button>
          </div>

          <div className="hud" style={{ marginBottom: 0 }}>
            <span className="chip">
              V·ªã tr√≠: <b>{position}</b>/12
            </span>
            <span className="chip">
              L·∫ßn tung g·∫ßn nh·∫•t: <b>{lastRoll ?? "‚Äî"}</b>
            </span>
          </div>
        </section>

        {/* C·ªôt ph·∫£i: Board (tr√°i) + Panel b√†i h·ªçc (ph·∫£i) */}
        <section
          className="right-pane"
          style={{
            display: "grid",
            gridTemplateColumns: "auto minmax(260px, 1fr)",
            gap: 12,
            alignItems: "start",
          }}
        >
          <div
            className="board"
            style={{ "--tile": "clamp(64px, 16vw, 110px)" }}
          >
            {board.map((sq) => (
              <div
                key={sq.id}
                className={`tile ${sq.id === position ? "active" : ""}`}
                title={sq.label}
              >
                <div className="id">{sq.id === position ? "üöÄ" : sq.id}</div>
                <div className="label">{sq.label}</div>
              </div>
            ))}
          </div>

          <div style={{ display: "flex", flexDirection: "column", gap: 18 }}>
            <div className="panel" style={{ alignSelf: "start" }}>
              <h2>üìå B√†i h·ªçc bi·ªán ch·ª©ng</h2>
              <p>
                {message ?? "H√£y tung x√∫c x·∫Øc ƒë·ªÉ kh√°m ph√° b√†i h·ªçc ·ªü t·ª´ng √¥."}
              </p>
              {MORE_INFO_IDS.has(position) && (
                <button
                  className="btn btn-primary"
                  style={{ marginTop: 12, width: "100%" }}
                  onClick={askChatGpt}
                  disabled={chatGptLoading}
                >
                  {chatGptLoading ? "ƒêang h·ªèi ChatGPT..." : "T√¨m hi·ªÉu th√™m üîé"}
                </button>
              )}
            </div>
            {/* Panel k·∫øt qu·∫£ ChatGPT (mock) */}
            {MORE_INFO_IDS.has(position) && (
              <div
                className="panel"
                style={{
                  alignSelf: "start",
                  background: "rgba(255,255,255,0.10)",
                  minHeight: 48,
                  // X√≥a m·ªçi gi·ªõi h·∫°n chi·ªÅu cao v√† overflow ƒë·ªÉ n·ªôi dung lu√¥n hi·ªÉn th·ªã ƒë·∫ßy ƒë·ªß
                  maxHeight: "none",
                  overflow: "visible",
                }}
              >
                <h2 style={{ fontSize: 17, marginBottom: 8 }}>
                  ü§ñ K·∫øt qu·∫£ ChatGPT
                </h2>
                {chatGptLoading && (
                  <div style={{ color: "#a5b4fc", fontStyle: "italic" }}>
                    ƒêang l·∫•y ƒë·ªãnh nghƒ©a t·ª´ ChatGPT...
                  </div>
                )}
                {chatGptResult && (
                  <div
                    style={{
                      marginTop: 2,
                      color: "#f1f5f9",
                      fontSize: 15,
                      whiteSpace: "pre-line",
                    }}
                  >
                    {chatGptResult}
                    {/* Hi·ªÉn th·ªã ngu·ªìn n·∫øu c√≥ */}
                    {MOCK_SOURCES[position] && (
                      <div
                        style={{
                          marginTop: 10,
                          color: "#a3e635",
                          fontSize: 13,
                          fontStyle: "italic",
                        }}
                      >
                        {MOCK_SOURCES[position]}
                      </div>
                    )}
                  </div>
                )}
                {!chatGptLoading && !chatGptResult && (
                  <div style={{ color: "#64748b", fontSize: 14 }}>
                    Nh·∫•n "T√¨m hi·ªÉu th√™m" ƒë·ªÉ h·ªèi ChatGPT v·ªÅ √¥ n√†y.
                  </div>
                )}
              </div>
            )}
          </div>
        </section>
      </div>
    </div>
  );
}
